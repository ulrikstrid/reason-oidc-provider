name: Build npm release

trigger:
  - master

stages:
  - stage: Build_platforms
    jobs:
      - template: ./.ci/build-platform.yml
        parameters:
          platform: Linux
          vmImage: ubuntu-16.04
          esyProject: esy
          STAGING_DIRECTORY: /home/vsts/STAGING
          STAGING_DIRECTORY_UNIX: /home/vsts/STAGING
          ESY__CACHE_INSTALL_PATH: /home/vsts/.esy/3_____________________________________________________________________/i
          ESY__CACHE_SOURCE_TARBALL_PATH: /home/vsts/.esy/source/i

      - template: ./.ci/build-platform.yml
        parameters:
          platform: macOS
          vmImage: macOS-latest
          esyProject: esy
          STAGING_DIRECTORY: /Users/vsts/STAGING
          STAGING_DIRECTORY_UNIX: /Users/vsts/STAGING
          ESY__CACHE_INSTALL_PATH: /Users/vsts/.esy/3____________________________________________________________________/i
          ESY__CACHE_SOURCE_TARBALL_PATH: /Users/vsts/.esy/source/i

      - template: ./.ci/build-windows.yml
        parameters:
          platform: Windows
          vmImage: vs2017-win2016
          esyProject: windows
          STAGING_DIRECTORY: C:\Users\VssAdministrator\STAGING
          STAGING_DIRECTORY_UNIX: /C/Users/VssAdministrator/STAGING
          ESY__CACHE_INSTALL_PATH: /C/Users/VssAdministrator/.esy/3_/i
          ESY__CACHE_SOURCE_TARBALL_PATH: /C/Users/VssAdministrator/.esy/source/i

  - stage: Build_docker
    dependsOn: []
    jobs:
      - job: Docker
        variables:
          dockerId: ulrikaugustsson
          imageName: reason-oidc-provider
        pool:
          vmImage: ubuntu-16.04

        steps:
          - script: docker login -u $(dockerId) -p $(dockerPassword)
            displayName: "Login to docker"

          # Pull the latest version of the image, in order to populate the build cache:
          - script: |
              docker pull $(dockerId)/$(imageName)-builder:latest || true
              docker pull $(dockerId)/$(imageName):latest         || true
            displayName: "Pull latest images"
          
          # Build the builder stage:
          - script: |
              docker build --target builder \
                    --cache-from=$(dockerId)/$(imageName)-builder:latest \
                    --tag $(dockerId)/$(imageName)-builder:latest .
            displayName: "Build builder stage"

          # Build the runtime stage, using cached compile stage:
          - script: |
              docker build \
                    --cache-from=$(dockerId)/$(imageName)-builder:latest \
                    --cache-from=$(dockerId)/$(imageName):latest \
                    --tag $(dockerId)/$(imageName):$(Build.BuildId) .
            displayName: "Build runtime stage"

          # Push the new versions:
          - script: |
              docker push $(dockerId)/$(imageName)-builder:latest
              docker push $(dockerId)/$(imageName):$(Build.BuildId)
            displayName: "Push to dockerhub"

  - stage: Deploy_docker
    dependsOn: [Build_docker]
    jobs:
      - deployment: DeployProvider
        pool:
          vmImage: 'Ubuntu-16.04'
        
        environment: oidc-provider-dev
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureRmWebAppDeployment@4
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: 'MPN private dev'
                  appType: 'webAppContainer'
                  WebAppName: 'reason-oidc-provider'
                  DockerNamespace: 'ulrikaugustsson'
                  DockerRepository: 'reason-oidc-provider'
                  DockerImageTag: '$(Build.BuildId)'
      - job: Integration_tests
        dependsOn: DeployProvider
        pool:
          vmImage: vs2017-win2016
        steps:
          - template: ./.ci/cypress.yml
      

